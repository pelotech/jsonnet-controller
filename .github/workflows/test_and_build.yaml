name: ci

on:
  create:
    tags:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  build:
    name: Unit Tests and Image Build/Push
    runs-on: ubuntu-latest
    steps:

    # Check out code
    - name: Checkout
      uses: actions/checkout@v2

    # Setup go 1.16
    - name: Setup Go 1.16
      uses: actions/setup-go@v1
      with:
        go-version: '^1.16.5'

    # Determine tag we will use for images
    - name: Get image version
      shell: bash
      run: |
        echo ::set-output name=tag::$([[ "${GITHUB_REF##*/}" == "main" ]] && echo latest || echo ${GITHUB_REF##*/})
      id: version

    # Set up a buildx runner
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Set up Go pkg cache
    - name: Cache Go Packages and controller-util Binaries
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
          /home/runner/work/jsonnet-controller/jsonnet-controller/testbin
          /home/runner/work/jsonnet-controller/jsonnet-controller/bin
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    # Set up an Docker layer cache
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    # Login to the container registry
    - name: Login to Container Registry
      run: echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
      if: ${{ github.event_name != 'pull_request' }}

    # Run linting
    - name: Run Lint
      run: make lint

    # Run unit tests - this will also ensure code-generation is run
    - name: Run Unit Tests
      run: make test

    # Build and push the image
    - name: Build and Push Controller Image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' }}
        tags: ghcr.io/pelotech/jsonnet-controller:${{ steps.version.outputs.tag }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new

    # This ugly bit is necessary if you don't want your cache to grow forever
    # till it hits GitHub's limit of 5GB.
    # Temp fix
    # https://github.com/docker/build-push-action/issues/252
    # https://github.com/moby/buildkit/issues/1896
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    # Update documentation
    - name: Force pkg.go.dev to refresh main branch
      run: curl "https://proxy.golang.org/github.com/pelotech/jsonnet-controller/@v/${GITHUB_REF##*/}.info"
      if: ${{ steps.version.outputs.tag == 'latest' && github.event_name != 'pull_request' }}

    - name: Force pkg.go.dev to refresh latest tag
      run: curl https://proxy.golang.org/github.com/pelotech/jsonnet-controller/@v/${{ steps.version.outputs.tag }}.info
      if: ${{ steps.version.outputs.tag != 'latest' && github.event_name != 'pull_request' }}