name: Build Images

on:
  create:
    tags:
  push:
    branches: [ main ]

jobs:

  build-amd64:
    name: Build amd64 Docker Image
    runs-on: ubuntu-latest
    steps:
      # Check out code
      - name: Checkout
        uses: actions/checkout@v2

      # Determine tag we will use for images
      - name: Get image version
        shell: bash
        run: |
          echo ::set-output name=tag::$([[ "${GITHUB_REF##*/}" == "main" ]] && echo latest || echo ${GITHUB_REF##*/})
        id: version

      # Set up a buildx runner
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Set up an Docker layer cache
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-amd64-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-amd64-buildx-

      # Login to the container registry
      - name: Login to Container Registry
        run: echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
        if: ${{ github.event_name != 'pull_request' }}

      - name: Patch buildx multiarch image
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker buildx create --name multiarch --driver docker-container --use
          docker buildx inspect --bootstrap

      # Build and push the image
      - name: Build and Push Controller Image
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) }}
          tags: ghcr.io/pelotech/jsonnet-controller:${{ steps.version.outputs.tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # This ugly bit is necessary if you don't want your cache to grow forever
      # till it hits GitHub's limit of 5GB.
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  build-arm64:
    name: Build arm64 Docker Image
    runs-on: ubuntu-latest
    steps:
      # Check out code
      - name: Checkout
        uses: actions/checkout@v2

      # Determine tag we will use for images
      - name: Get image version
        shell: bash
        run: |
          echo ::set-output name=tag::$([[ "${GITHUB_REF##*/}" == "main" ]] && echo latest || echo ${GITHUB_REF##*/})
        id: version

      # Set up a buildx runner
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Set up an Docker layer cache
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-arm64-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-arm64-buildx-

      # Login to the container registry
      - name: Login to Container Registry
        run: echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
        if: ${{ github.event_name != 'pull_request' }}

      - name: Patch buildx multiarch image
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker buildx create --name multiarch --driver docker-container --use
          docker buildx inspect --bootstrap

      # Build and push the image
      - name: Build and Push Controller Image
        uses: docker/build-push-action@v2
        with:
          platforms: linux/arm64
          push: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) }}
          tags: ghcr.io/pelotech/jsonnet-controller:${{ steps.version.outputs.tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # This ugly bit is necessary if you don't want your cache to grow forever
      # till it hits GitHub's limit of 5GB.
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  build-armv7:
    name: Build armv7 Docker Image
    runs-on: ubuntu-latest
    steps:
      # Check out code
      - name: Checkout
        uses: actions/checkout@v2

      # Determine tag we will use for images
      - name: Get image version
        shell: bash
        run: |
          echo ::set-output name=tag::$([[ "${GITHUB_REF##*/}" == "main" ]] && echo latest || echo ${GITHUB_REF##*/})
        id: version

      # Set up a buildx runner
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Set up an Docker layer cache
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-armv7-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-armv7-buildx-

      # Login to the container registry
      - name: Login to Container Registry
        run: echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
        if: ${{ github.event_name != 'pull_request' }}

      - name: Patch buildx multiarch image
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker buildx create --name multiarch --driver docker-container --use
          docker buildx inspect --bootstrap

      # Build and push the image
      - name: Build and Push Controller Image
        uses: docker/build-push-action@v2
        with:
          platforms: linux/arm/v7
          push: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) }}
          tags: ghcr.io/pelotech/jsonnet-controller:${{ steps.version.outputs.tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # This ugly bit is necessary if you don't want your cache to grow forever
      # till it hits GitHub's limit of 5GB.
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
